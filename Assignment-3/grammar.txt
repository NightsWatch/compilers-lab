
func_list -> func func_list | e

func -> void_or_datatype ID (arg_list) { stmnts }

void_or_datatype -> VOID | DATA_TYPE

arg_list -> arg , arg_list | arg

arg -> DATA_TYPE ID



stmnts -> stmt; stmnts | e

stmt -> declaration; | ID EQUALS expr; | func_call; | iff | while(expr){stmnts} | FOR (id EQUALS expr; expr; expr){stmnts} | CONTINUE; | BREAK; | RETURN id_or_data;

iff -> IF (expr) {stmnts} ell 

ell -> ELSE IF (expr) {stmnts} ell | ELSE (expr) {stmnts} | e





id_or_data -> ID | num_or_char


expr -> func_call | eval

func_call -> ID (arg_passed)

arg_passed -> ID, arg_passed | ID



declaration -> DATA_TYPE ID assign

assign -> EQUALS expr | e

num_or_char -> NUM | FLOAT | CHAR





eval -> termp expr''

termp -> term expr'

expr' -> PLUS term expr' | MINUS term expr' | є

term -> factor term'

term' -> TIMES factor term' | DIVIDE factor term' | є

factor -> id_or_data | LP expr RP



expr'' -> LESSTHAN termp expr'' | GREATERTHAN termp expr'' | EQUALTO termp expr'' | є


